Graph Catalog
Write an application that can manage a catalog of graphs. An entry in this catalog might be a simple graph, a digraph, multigraph, etc. 

All items will have some common properties, such as name, description, definition, image, etc. 
The definition of a graph will be stored in a text file, using standard formats, such as trivial graph format (TGF) , GraphML or others. 
Optional, a graph may have an image stored in a binary file, using standard formats, such as JPEG, PNG, SVG, PDF or others.

The main specifications of the application are:


Create TGF files for some well known graphs, for example k3.tgf:
# Nodes
1 
2 
3
# Edges
1 2 Edge between the two
1 3
2 3
Create image or PDF files for the graphs you have defined.
Create an object-oriented model of the problem. You should have at least the following classes: Graph, Catalog, CatalogIO.
Implement the following methods representing commands that will manage the content of the catalog:
add: adds a new entry into the catalog;
list: prints the content of the catalog on the screen;
open: opens the image (or the definition) file using the native operating system application (see the Desktop class);
save: saves the catalog to an external file (either as a text or binary, using object serialization);
load: loads the catalog from an external file.
  Catalog catalog = new Catalog("d:/graphs");  
  catalog.add (new Graph("K4", "complete/k4.tgf", "complete/view/k4.png"));  
  catalog.add (new Graph("Petersen", "special/petersen.tgf", "d:/ag/agr1.pdf"));  
  catalog.open("Petersen");
  ...
  catalog.save("catalog.dat");
  //...
  catalog.load("catalog.dat");
  catalog.list();
The application will signal invalid data (file format, path, etc.) using a custom exception.
The final form of the application will be an executable JAR archive. Identify the generated archive and launch the application from the console, using the JAR.